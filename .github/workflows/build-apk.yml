name: Build Android APK

# Workflow triggers
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'debug'
        type: choice
        options:
          - debug
          - release
          - both

# Environment variables
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.jvmargs=-Xmx2048m
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    # Checkout repository code
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Set up JDK 17 (compatible with Gradle 8.3)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # Setup Android SDK
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        cmake: 3.22.1
        ndk: 25.2.9519653
        
    # Accept Android SDK licenses
    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses || true
    
    # Cache Gradle dependencies
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ${{ github.workspace }}/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-
    
    # Make gradlew executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    # Validate Gradle wrapper
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2
    
    # Clean build directory
    - name: Clean build directory
      run: ./gradlew clean
    
    # Build debug APK
    - name: Build Debug APK
      if: ${{ github.event.inputs.build_type != 'release' }}
      run: ./gradlew assembleDebug --stacktrace --no-daemon
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx2g -Dorg.gradle.jvmargs=-Xmx2048m
    
    # List generated APK files for debugging
    - name: List APK files
      if: always()
      run: find app/build/outputs/apk -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"
    
    # Upload Debug APK
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.build_type != 'release' && success() }}
      with:
        name: crypto-ko-debug-apk-${{ github.run_number }}
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 30
        if-no-files-found: warn
    
    # Build release APK (if keystore is available)
    - name: Build Release APK
      if: ${{ github.event.inputs.build_type != 'debug' }}
      run: ./gradlew assembleRelease --stacktrace --no-daemon
      continue-on-error: true
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx2g -Dorg.gradle.jvmargs=-Xmx2048m
    
    # Upload Release APK (if built successfully)
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.build_type != 'debug' && success() }}
      with:
        name: crypto-ko-release-apk-${{ github.run_number }}
        path: app/build/outputs/apk/release/*.apk
        retention-days: 30
        if-no-files-found: warn
      continue-on-error: true
    
    # Generate build report
    - name: Generate Build Report
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "### APK Files Generated:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find app/build/outputs/apk -name "*.apk" -type f -exec ls -lh {} \; 2>/dev/null || echo "No APK files found" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "### Build Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- **Gradle Version:** $(./gradlew --version | grep Gradle)" >> $GITHUB_STEP_SUMMARY
        echo "- **Java Version:** $(java --version | head -1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Android SDK:** API 34" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type:** ${{ github.event.inputs.build_type || 'debug' }}" >> $GITHUB_STEP_SUMMARY
        echo "### Build Status:" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY